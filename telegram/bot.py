import telebot
from telebot import types
import sqlite3
from datetime import datetime, timedelta
import random
import re
import config
import threading
from math import floor
import time

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(config.BOT_TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
with sqlite3.connect('database.db') as conn:
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS requests (
        ID INTEGER PRIMARY KEY,
        LAST_REQUEST TIMESTAMP,
        STATUS TEXT DEFAULT 'pending'
    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        ID INTEGER PRIMARY KEY,
        BALANCE REAL DEFAULT 0,
        REG_DATE TEXT
    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS numbers (
        NUMBER TEXT PRIMARY KEY,
        ID_OWNER INTEGER,
        TAKE_DATE TEXT,
        SHUTDOWN_DATE TEXT,
        MODERATOR_ID INTEGER,
        CONFIRMED_BY_MODERATOR_ID INTEGER,
        VERIFICATION_CODE TEXT,
        STATUS TEXT
    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS personal (
        ID INTEGER PRIMARY KEY,
        TYPE TEXT
    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS withdraws (
        ID INTEGER,
        AMOUNT REAL,
        DATE TEXT,
        STATUS TEXT
    )''')
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É settings, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''CREATE TABLE IF NOT EXISTS settings (
        PRICE REAL  -- –¶–µ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä
    )''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü HOLD_TIME, –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    cursor.execute("PRAGMA table_info(settings)")
    columns = [col[1] for col in cursor.fetchall()]
    if 'HOLD_TIME' not in columns:
        cursor.execute('ALTER TABLE settings ADD COLUMN HOLD_TIME INTEGER')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ settings
    cursor.execute('SELECT COUNT(*) FROM settings')
    count = cursor.fetchone()[0]
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 2$ –∑–∞ –Ω–æ–º–µ—Ä, —Ö–æ–ª–¥ 5 –º–∏–Ω—É—Ç
    if count == 0:
        cursor.execute('INSERT INTO settings (PRICE, HOLD_TIME) VALUES (?, ?)', (2.0, 5))
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –Ω–æ —Å—Ç–æ–ª–±–µ—Ü HOLD_TIME –Ω–æ–≤—ã–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cursor.execute('UPDATE settings SET HOLD_TIME = ? WHERE HOLD_TIME IS NULL', (5,))
    
    conn.commit()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class Database:
    def get_db(self):
        return sqlite3.connect('database.db')

    def is_moderator(self, user_id):
        with self.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM personal WHERE ID = ? AND TYPE = ?', (user_id, 'moder'))
            return cursor.fetchone() is not None

    def update_balance(self, user_id, amount):
        with self.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET BALANCE = BALANCE + ? WHERE ID = ?', (amount, user_id))
            conn.commit()

db = Database()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—è–≤–æ–∫
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT LAST_REQUEST, STATUS FROM requests WHERE ID = ?', (user_id,))
        request = cursor.fetchone()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω
        if request and request[1] == 'approved':
            show_main_menu(message)
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if request:
            last_request_time = datetime.strptime(request[0], "%Y-%m-%d %H:%M:%S")
            if datetime.now() - last_request_time < timedelta(minutes=15):
                time_left = 15 - ((datetime.now() - last_request_time).seconds // 60)
                bot.send_message(message.chat.id, 
                                f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {time_left} –º–∏–Ω—É—Ç.")
                return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        cursor.execute('INSERT OR REPLACE INTO requests (ID, LAST_REQUEST, STATUS) VALUES (?, ?, ?)',
                      (user_id, current_date, 'pending'))
        conn.commit()
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, 
                        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –≤–∞—Å –≤–ø—É—Å—Ç—è—Ç –≤ –±–æ—Ç–∞.")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        username = f"@{message.from_user.username}" if message.from_user.username else "–ù–µ—Ç username"
        admin_text = f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {username} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ"
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚úÖ –í–ø—É—Å—Ç–∏—Ç—å –≤ –±–æ—Ç–∞", callback_data=f"approve_user_{user_id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å –≤ –¥–æ—Å—Ç—É–ø–µ", callback_data=f"reject_user_{user_id}")
        )
        
        for admin_id in config.ADMINS_ID:
            try:
                bot.send_message(admin_id, admin_text, reply_markup=markup)
            except:
                continue


@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_user_"))
def approve_user_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    user_id = int(call.data.split("_")[2])
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS FROM requests WHERE ID = ?', (user_id,))
        request = cursor.fetchone()
        
        if request:
            cursor.execute('UPDATE requests SET STATUS = "approved" WHERE ID = ?', (user_id,))
        else:
            cursor.execute('INSERT INTO requests (ID, LAST_REQUEST, STATUS) VALUES (?, ?, ?)',
                          (user_id, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 'approved'))
        conn.commit()
        
        try:
            bot.send_message(user_id, "‚úÖ –í–∞—Å –≤–ø—É—Å—Ç–∏–ª–∏ –≤ –±–æ—Ç–∞! –ù–∞–ø–∏—à–∏—Ç–µ /start")
        except:
            bot.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
                                 call.message.chat.id,
                                 call.message.message_id)
        bot.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω",
                             call.message.chat.id,
                             call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_user_"))
def reject_user_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    user_id = int(call.data.split("_")[2])
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "rejected" –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute('UPDATE requests SET STATUS = "rejected", LAST_REQUEST = ? WHERE ID = ?',
                      (current_date, user_id))
        conn.commit()
        
        try:
            bot.send_message(user_id, "‚ùå –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.")
        except:
            bot.edit_message_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
                                 call.message.chat.id,
                                 call.message.message_id)
        bot.edit_message_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω",
                             call.message.chat.id,
                             call.message.message_id)
                             
def show_main_menu(message):
    user_id = message.from_user.id
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    print(f"[+] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è:")
    print(f"üÜî ID: {user_id}")
    print(f"üë§ –ò–º—è: {message.from_user.first_name} {message.from_user.last_name or ''}")
    print(f"üîó Username: @{message.from_user.username or '–Ω–µ—Ç'}")
    print(f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {current_date}")
    print("-" * 40)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO users (ID, BALANCE, REG_DATE) VALUES (?, ?, ?)',
                      (user_id, 0, current_date))
        
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)
        
        cursor.execute('SELECT NUMBER FROM numbers WHERE MODERATOR_ID = ? AND SHUTDOWN_DATE = "0" AND VERIFICATION_CODE IS NULL', 
                      (user_id,))
        active_number = cursor.fetchone()
        conn.commit()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_admin = user_id in config.ADMINS_ID
    is_moderator = db.is_moderator(user_id)

    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if is_moderator and not is_admin:
        # –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
        welcome_text = "üìù <b>–ó–∞—è–≤–∫–∏</b>"
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–≤–∫–ª—é—á–∞—è —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω —Ç–∞–∫–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä)
        welcome_text = (
            f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
            f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
            "<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
            "‚Ä¢ <i>–í—ã –ø—Ä–æ–¥–∞—ë—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
            f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ {hold_time} –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã.</b>\n\n"
            "<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
            f"‚ñ™Ô∏è <code>{price}$</code> –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ {hold_time} –º–∏–Ω—É—Ç)\n"
            f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME} ?</b>\n"
            "‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
            "‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞ —Ç—ã</i>\n"
            "‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
            "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>"
        )
    
    if active_number and is_moderator:
        welcome_text += f"\n\n‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–æ–º–µ—Ä: {active_number[0]}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –Ω–∏–º –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä'."

    markup = types.InlineKeyboardMarkup()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ö–Ω–æ–ø–∫–∏ "–°–¥–∞—Ç—å –Ω–æ–º–µ—Ä" –∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not is_moderator or is_admin:
        markup.row(
            types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ê–¥–º–∏–Ω–∫–∞" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if is_admin:
        markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel"))
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if is_moderator:
        markup.add(
            types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="get_number"),
            types.InlineKeyboardButton("üì± –ú–æ–∏ –Ω–æ–º–µ—Ä–∞", callback_data="moderator_numbers")
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if hasattr(message, 'chat'):
         bot.send_message(message.chat.id, welcome_text, parse_mode='HTML', reply_markup=markup)
    else:
        bot.edit_message_text(welcome_text, message.message.chat.id, message.message.message_id, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "admin_panel")
def admin_panel(call):
    if call.from_user.id in config.ADMINS_ID:
        with db.get_db() as conn:
            cursor = conn.cursor()
            today = datetime.now().strftime("%Y-%m-%d")
            
            cursor.execute('''
                SELECT TAKE_DATE, SHUTDOWN_DATE 
                FROM numbers 
                WHERE SHUTDOWN_DATE LIKE ? || "%" 
                AND TAKE_DATE != "0" 
                AND TAKE_DATE != "1"
            ''', (today,))
            
            total_numbers = 0
            numbers_count = 0
            
            for take_date, shutdown_date in cursor.fetchall():
                numbers_count += 1
                total_numbers += 1

        admin_text = (
            "<b>‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"üì± –°–ª–µ—Ç–µ–≤—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤: <code>{numbers_count}</code>\n"
            f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: <code>{total_numbers}</code>"
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã", callback_data="moderators"))
        markup.add(types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="delete_moderator"))
        markup.add(types.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast"))
        markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
        markup.add(types.InlineKeyboardButton("üì± –í—Å–µ –Ω–æ–º–µ—Ä–∞", callback_data="all_numbers"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        bot.edit_message_text(admin_text,
                            call.message.chat.id,
                            call.message.message_id,
                            parse_mode='HTML',
                            reply_markup=markup)

def check_time():
    while True:
        current_time = datetime.now().strftime("%H:%M")
        if current_time == config.CLEAR_TIME:
            clear_database()
            time.sleep(61)
        time.sleep(30)

def check_numbers_for_payment():
    while True:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
            result = cursor.fetchone()
            price, hold_time = result if result else (2.0, 5)
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å TAKE_DATE = "0" –∏–ª–∏ "1"
            cursor.execute('SELECT NUMBER, ID_OWNER, TAKE_DATE FROM numbers WHERE SHUTDOWN_DATE = "0" AND STATUS = "–∞–∫—Ç–∏–≤–µ–Ω" AND TAKE_DATE NOT IN ("0", "1")')
            active_numbers = cursor.fetchall()
            
            current_time = datetime.now()
            for number, owner_id, take_date in active_numbers:
                try:
                    take_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                    time_diff = (current_time - take_time).total_seconds() / 60  # –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
                    
                    if time_diff >= hold_time:
                        # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø–ª–∞—Ç—É
                        db.update_balance(owner_id, price)
                        bot.send_message(owner_id, 
                                       f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä {number} –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª {hold_time} –º–∏–Ω—É—Ç!\n"
                                       f"üíµ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: ${price}")
                        # –û—Ç–º–µ—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                        shutdown_date = current_time.strftime("%Y-%m-%d %H:%M:%S")
                        cursor.execute('UPDATE numbers SET SHUTDOWN_DATE = ? WHERE NUMBER = ?', (shutdown_date, number))
                        conn.commit()
                except ValueError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ {number}: {e}")
                    continue
        
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
def clear_database():
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT DISTINCT ID_OWNER FROM numbers WHERE ID_OWNER NOT IN (SELECT ID FROM personal WHERE TYPE = "ADMIN" OR TYPE = "moder")')
        users = cursor.fetchall()
        
        cursor.execute('DELETE FROM numbers')
        conn.commit()
        
        for user in users:
            try:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"))
                bot.send_message(user[0], "üîÑ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.\nüì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –Ω–æ–º–µ—Ä–∞ —Å–Ω–æ–≤–∞.", reply_markup=markup)
            except:
                continue
        
        for admin_id in config.ADMINS_ID:
            try:
                bot.send_message(admin_id, "üîÑ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω—ã.")
            except:
                continue

def run_bot():
    time_checker = threading.Thread(target=check_time)
    time_checker.daemon = True
    time_checker.start()
    
    payment_checker = threading.Thread(target=check_numbers_for_payment)
    payment_checker.daemon = True
    payment_checker.start()
    
    bot.polling(none_stop=True)

def check_balance_and_fix(user_id):
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        if user and user[0] < 0:
            cursor.execute('UPDATE users SET BALANCE = 0 WHERE ID = ?', (user_id,))
            conn.commit()

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def show_profile(call):
    user_id = call.from_user.id
    check_balance_and_fix(user_id)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)
        
        if user:
            cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ? AND SHUTDOWN_DATE = "0"', (user_id,))
            active_numbers = cursor.fetchone()[0]
            
            roles = []
            if user_id in config.ADMINS_ID:
                roles.append("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            if db.is_moderator(user_id):
                roles.append("üõ° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
            if not roles:
                roles.append("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            profile_text = (f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
                          f"üÜîID —Å—Å—ã–ª–∫–æ–π: <code>https://t.me/@id{user_id}</code>\n"
                          f"üÜî ID: <code>{user[0]}</code>\n"
                          f"üí∞ –ë–∞–ª–∞–Ω—Å: {user[1]} $\n"
                          f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {active_numbers}\n"
                          f"üé≠ –†–æ–ª—å: {' | '.join(roles)}\n"
                          f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[2]}\n"
                          f"üíµ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {price}$ –∑–∞ –Ω–æ–º–µ—Ä\n"
                          f"‚è± –í—Ä–µ–º—è —Ö–æ–ª–¥–∞: {hold_time} –º–∏–Ω—É—Ç")

            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üí≥ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"),
                types.InlineKeyboardButton("üì± –ú–æ–∏ –Ω–æ–º–µ—Ä–∞", callback_data="my_numbers")
            )
            
            if user_id in config.ADMINS_ID:
                cursor.execute('SELECT COUNT(*) FROM users')
                total_users = cursor.fetchone()[0]
                cursor.execute('SELECT COUNT(*) FROM numbers WHERE SHUTDOWN_DATE = "0"')
                active_total = cursor.fetchone()[0]
                cursor.execute('SELECT COUNT(*) FROM numbers')
                total_numbers = cursor.fetchone()[0]
                
                profile_text += (f"\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"
                               f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                               f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {active_total}\n"
                               f"üìä –í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: {total_numbers}")
            
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            bot.edit_message_text(profile_text,
                                call.message.chat.id,
                                call.message.message_id,
                                reply_markup=markup,
                                parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == "withdraw")
def start_withdrawal_request(call):
    user_id = call.from_user.id
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        balance = cursor.fetchone()[0]
        
        if balance > 0:
            msg = bot.edit_message_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}$\nüí≥ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –≤–µ—Å—å –≤–∞—à –±–∞–ª–∞–Ω—Å?",
                                      call.message.chat.id,
                                      call.message.message_id)
            bot.register_next_step_handler(msg, handle_withdrawal_request, balance)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.edit_message_text("‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞",
                                call.message.chat.id,
                                call.message.message_id,
                                reply_markup=markup)

def handle_withdrawal_request(message, amount):
    user_id = message.from_user.id
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()

        if user and user[0] > 0:
            new_balance = 0
            cursor.execute('UPDATE users SET BALANCE = ? WHERE ID = ?', (new_balance, user_id))
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('INSERT INTO withdraws (ID, AMOUNT, DATE, STATUS) VALUES (?, ?, ?, ?)', 
                          (user_id, user[0], current_date, "pending"))
            conn.commit()

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id,
                           f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {user[0]}$ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                           reply_markup=markup)
            
            bot.send_message(user_id, f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {user[0]}$. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: 0$.")
            
            admin_message = (
                f"üí∞ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É\n\n"
                f"üë§ ID: {user_id}\n"
                f"üíµ –°—É–º–º–∞: {user[0]}$\n\n"
                f"üì± –í–µ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ ANDROID: tg://openmessage?user_id={user_id}\n"
                f"üì± –í–µ—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ IOS: https://t.me/@id{user_id}"
            )
            admin_markup = types.InlineKeyboardMarkup()
            admin_markup.add(
                types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"send_check_{user_id}_{user[0]}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdraw_{user_id}_{user[0]}")
            )
            for admin_id in config.ADMINS_ID:
                try:
                    bot.send_message(admin_id, admin_message, reply_markup=admin_markup)
                except:
                    continue
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("send_check_"))
def request_check_link(call):
    if call.from_user.id in config.ADMINS_ID:
        user_id, amount = call.data.split("_")[2:]
        msg = bot.edit_message_text("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫:",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_check_link, user_id, amount)

def process_check_link(message, user_id, amount):
    if message.from_user.id in config.ADMINS_ID:
        check_link = message.text
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM withdraws WHERE ID = ? AND AMOUNT = ?', (int(user_id), float(amount)))
            conn.commit()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=check_link))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.send_message(int(user_id),
                           f"‚úÖ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ {amount}$ –≥–æ—Ç–æ–≤–∞!\nüí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞",
                           reply_markup=markup)
        except:
            pass

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_withdraw_"))
def reject_withdraw(call):
    if call.from_user.id in config.ADMINS_ID:
        _, _, user_id, amount = call.data.split("_")
        amount = float(amount)
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET BALANCE = BALANCE + ? WHERE ID = ?', (amount, int(user_id)))
            cursor.execute('DELETE FROM withdraws WHERE ID = ? AND AMOUNT = ?', (int(user_id), amount))
            conn.commit()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üí≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="withdraw"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.send_message(int(user_id),
                           f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount}$ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\nüí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å",
                           reply_markup=markup)
        except:
            pass
        
        markup_admin = types.InlineKeyboardMarkup()
        markup_admin.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup_admin.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã",
                            call.message.chat.id,
                            call.message.message_id,
                            reply_markup=markup_admin)

@bot.callback_query_handler(func=lambda call: call.data == "moderators")
def moderators(call):
    if call.from_user.id in config.ADMINS_ID:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_moder"),
            types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="remove_moder")
        )
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:", 
                            call.message.chat.id, 
                            call.message.message_id, 
                            reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "add_moder")
def add_moder_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_add_moder)

def process_add_moder(message):
    try:
        new_moder_id = int(message.text)
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM personal WHERE ID = ? AND TYPE = ?', (new_moder_id, 'moder'))
            if cursor.fetchone() is None:
                try:
                    bot.send_message(new_moder_id, "üéâ –í–∞–º –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞! –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.")
                    cursor.execute('INSERT INTO personal (ID, TYPE) VALUES (?, ?)', (new_moder_id, 'moder'))
                    conn.commit()
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_moder_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=markup)
                except telebot.apihelper.ApiTelegramException:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_moder_id} –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º!", reply_markup=markup)
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=markup)
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "remove_moder")
def remove_moder_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_remove_moder)

def process_remove_moder(message):
    try:
        moder_id = int(message.text)
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM personal WHERE ID = ? AND TYPE = ?', (moder_id, 'moder'))
            conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            if cursor.rowcount > 0:
                try:
                    bot.send_message(moder_id, "‚ö†Ô∏è –£ –≤–∞—Å –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
                except:
                    pass
                bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {moder_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!", reply_markup=markup)
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=markup)
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "delete_moderator")
def delete_moderator_request(call):
    if call.from_user.id in config.ADMINS_ID:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT ID FROM personal WHERE TYPE = 'moder'")
            moderators = cursor.fetchall()
        
        if not moderators:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.edit_message_text("‚ùå –ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                                call.message.chat.id,
                                call.message.message_id,
                                reply_markup=markup)
            return

        text = "üë• –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        markup = types.InlineKeyboardMarkup()
        for moder in moderators:
            text += f"ID: {moder[0]}\n"
            markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {moder[0]}", callback_data=f"confirm_delete_moder_{moder[0]}"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete_moder_"))
def confirm_delete_moderator(call):
    if call.from_user.id in config.ADMINS_ID:
        moder_id = int(call.data.split("_")[3])
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM personal WHERE ID = ? AND TYPE = 'moder'", (moder_id,))
            affected_rows = cursor.rowcount
            conn.commit()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        if affected_rows > 0:
            try:
                bot.send_message(moder_id, "‚ö†Ô∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except:
                pass
            bot.edit_message_text(f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å ID {moder_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                                call.message.chat.id,
                                call.message.message_id,
                                reply_markup=markup)
        else:
            bot.edit_message_text(f"‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å ID {moder_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                call.message.chat.id,
                                call.message.message_id,
                                reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "broadcast")
def request_broadcast_message(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                                  call.message.chat.id,
                                  call.message.message_id,
                                  reply_markup=markup)
        bot.register_next_step_handler(msg, process_broadcast_message)

def process_broadcast_message(message):
    if message.from_user.id in config.ADMINS_ID:
        broadcast_text = message.text
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID FROM users')
            users = cursor.fetchall()
        
        success = 0
        failed = 0
        for user in users:
            try:
                bot.send_message(user[0], broadcast_text)
                success += 1
            except Exception:
                failed += 1
        
        stats_text = (f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
                     f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
                     f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}\n"
                     f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì¢ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id, stats_text, reply_markup=markup, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == "my_numbers")
def show_my_numbers(call):
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT NUMBER, TAKE_DATE, SHUTDOWN_DATE, STATUS FROM numbers WHERE ID_OWNER = ?', 
                          (call.from_user.id,))
            numbers = cursor.fetchall()

        if not numbers:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.edit_message_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤.", 
                                call.message.chat.id, 
                                call.message.message_id, 
                                reply_markup=markup)
            return

        text = "<b>üìã –°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –Ω–æ–º–µ—Ä–æ–≤:</b>\n\n"
        for number, take_date, shutdown_date, status in numbers:
            text += f"üì± –ù–æ–º–µ—Ä: {number}\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {status if status else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            if take_date == "0":
                text += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            elif take_date == "1":
                text += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –∫–æ–¥\n"
            else:
                text += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
            if shutdown_date != "0":
                text += f"‚ùå –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(text, 
                            call.message.chat.id, 
                            call.message.message_id, 
                            reply_markup=markup,
                            parse_mode='HTML')

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_my_numbers: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤.", 
                            call.message.chat.id, 
                            call.message.message_id, 
                            reply_markup=markup)
        

@bot.callback_query_handler(func=lambda call: call.data == "settings")
def show_settings(call):
    if call.from_user.id in config.ADMINS_ID:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
            result = cursor.fetchone()
            price, hold_time = result if result else (2.0, 5)
        
        settings_text = (
            "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã</b>\n\n"
            f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: <code>{price}$</code> –∑–∞ –Ω–æ–º–µ—Ä\n"
            f"–í—Ä–µ–º—è —Ö–æ–ª–¥–∞: <code>{hold_time}</code> –º–∏–Ω—É—Ç\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="change_amount"))
        markup.add(types.InlineKeyboardButton("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞", callback_data="change_hold_time"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(settings_text,
                            call.message.chat.id,
                            call.message.message_id,
                            parse_mode='HTML',
                            reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "change_amount")
def change_amount_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2):",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_change_amount)

def process_change_amount(message):
    if message.from_user.id in config.ADMINS_ID:
        try:
            new_amount = float(message.text)
            if new_amount <= 0:
                raise ValueError
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE settings SET PRICE = ?', (new_amount,))
                conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, f"‚úÖ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_amount}$", reply_markup=markup)
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "change_hold_time")
def change_hold_time_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("‚è± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5):",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_change_hold_time)

def process_change_hold_time(message):
    if message.from_user.id in config.ADMINS_ID:
        try:
            new_time = int(message.text)
            if new_time <= 0:
                raise ValueError
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE settings SET HOLD_TIME = ?', (new_time,))
                conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, f"‚úÖ –í—Ä–µ–º—è —Ö–æ–ª–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time} –º–∏–Ω—É—Ç", reply_markup=markup)
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "get_number")
def get_number_callback(call):
    if not db.is_moderator(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!")
        return

    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —É–∂–µ –≤–∑—è—Ç—ã–π –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            cursor.execute('''SELECT NUMBER 
                            FROM numbers 
                            WHERE MODERATOR_ID = ? 
                            AND SHUTDOWN_DATE = "0" 
                            AND VERIFICATION_CODE IS NULL''', 
                          (call.from_user.id,))
            existing_number = cursor.fetchone()

            if existing_number:
                number = existing_number[0]
                message_text = (f"üì± <b>–ù–æ–º–µ—Ä:</b> {number}\n"
                               "‚öôÔ∏è –í—ã —É–∂–µ –≤–∑—è–ª–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
                               "–û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –æ—Ç–º–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.")
            else:
                # –ò—â–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                cursor.execute('''SELECT * 
                                FROM numbers 
                                WHERE TAKE_DATE = "0"
                                AND MODERATOR_ID IS NULL
                                AND SHUTDOWN_DATE = "0"
                                AND (STATUS = "–æ–∂–∏–¥–∞–µ—Ç" OR STATUS IS NULL)
                                ORDER BY RANDOM()
                                LIMIT 1''')
                number_data = cursor.fetchone()

                if not number_data:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
                    bot.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", 
                                        call.message.chat.id, 
                                        call.message.message_id, 
                                        reply_markup=markup)
                    return

                number = number_data[0]  # NUMBER ‚Äî –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–∞–±–ª–∏—Ü–µ numbers
                owner_id = number_data[1]  # ID_OWNER ‚Äî –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –±–µ—Ä—ë—Ç –µ–≥–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
                cursor.execute('''UPDATE numbers 
                                SET TAKE_DATE = "1", 
                                    MODERATOR_ID = ?,
                                    SHUTDOWN_DATE = "0",
                                    VERIFICATION_CODE = NULL,
                                    STATUS = "–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞"
                                WHERE NUMBER = ?''', 
                              (call.from_user.id, number))
                conn.commit()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–æ–º–µ—Ä–∞
                markup_owner = types.InlineKeyboardMarkup()
                markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                try:
                    bot.send_message(owner_id, 
                                    f"üì± –í–∞—à –Ω–æ–º–µ—Ä {number} –≤–∑—è—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n"
                                    "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞.",
                                    reply_markup=markup_owner)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id}: {e}")

                message_text = (f"üì± <b>–ù–æ–º–µ—Ä:</b> {number}\n"
                               "‚öôÔ∏è –ù–æ–º–µ—Ä –≤–∑—è—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
                               "–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–¥ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞.")

            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            markup_mod = types.InlineKeyboardMarkup()
            markup_mod.add(types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", callback_data=f"send_code_{number}"))
            markup_mod.add(types.InlineKeyboardButton("‚ùå –ù–µ –≤–∞–ª–∏–¥–Ω—ã–π", callback_data=f"invalid_{number}"))
            markup_mod.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            bot.edit_message_text(message_text, 
                                call.message.chat.id, 
                                call.message.message_id, 
                                reply_markup=markup_mod,
                                parse_mode='HTML')

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_number_callback: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                            call.message.chat.id, 
                            call.message.message_id, 
                            reply_markup=markup)
        
@bot.callback_query_handler(func=lambda call: call.data.startswith("send_code_"))
def send_verification_code(call):
    number = call.data.split("_")[2]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
        owner = cursor.fetchone()
    
    if owner:
        markup = types.ReplyKeyboardRemove()
        msg = bot.send_message(owner[0], f"üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É:", reply_markup=markup)
        bot.edit_message_text(f"üì± –ù–æ–º–µ—Ä: {number}\n‚úâÔ∏è –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É.", call.message.chat.id, call.message.message_id)
                
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE numbers SET VERIFICATION_CODE = "" WHERE NUMBER = ?', (number,))
            cursor.execute('UPDATE numbers SET MODERATOR_ID = ? WHERE NUMBER = ?', (call.from_user.id, number))
            conn.commit()
        
        bot.register_next_step_handler(msg, process_verification_code_input, number, call.from_user.id)

def process_verification_code_input(message, number, moderator_id):
    user_input = message.text.strip()
    
    if not user_input:
        markup = types.ReplyKeyboardRemove()
        msg = bot.send_message(message.chat.id, "‚ùå –ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_verification_code_input, number, moderator_id)
        return

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE numbers SET VERIFICATION_CODE = ? WHERE NUMBER = ?', (user_input, number))
        conn.commit()

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –î–∞, –∫–æ–¥ –≤–µ—Ä–Ω—ã–π", callback_data=f"confirm_code_{number}_{user_input}"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"change_code_{number}")
    )
    bot.send_message(message.chat.id, f"–í—ã –≤–≤–µ–ª–∏ –∫–æ–¥: {user_input}\n–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_code_"))
def confirm_code(call):
    number = call.data.split("_")[2]
    code = "_".join(call.data.split("_")[3:])
    
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∞–µ–º ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            cursor.execute('SELECT MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            moderator_id = result[0]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        bot.send_message(call.from_user.id, f"‚úÖ –ö–æ–¥ '{code}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –≤—Å—Ç–∞–ª –ª–∏ –Ω–æ–º–µ—Ä
        if moderator_id:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úÖ –î–∞, –≤—Å—Ç–∞–ª", callback_data=f"number_active_{number}"))
            markup.add(types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"number_invalid_{number}"))
            bot.send_message(moderator_id, 
                            f"üì± –ö–æ–¥ –ø–æ –≤–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É {number}\n–ö–æ–¥: {code}\n\n"
                            "–í—Å—Ç–∞–ª –ª–∏ –Ω–æ–º–µ—Ä?", 
                            reply_markup=markup)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ confirm_code: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞.")
        

@bot.callback_query_handler(func=lambda call: call.data.startswith("change_code_"))
def change_code(call):
    number = call.data.split("_")[2]
    
    markup = types.ReplyKeyboardRemove()
    msg = bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_verification_code_input, number, call.from_user.id)

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE numbers SET VERIFICATION_CODE = "" WHERE NUMBER = ?', (number,))
        conn.commit()

def create_back_to_main_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith("code_entered_"))
def confirm_verification_code(call):
    number = call.data.split("_")[2]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE numbers SET VERIFICATION_CODE = NULL WHERE NUMBER = ?', (number,))
        cursor.execute('SELECT MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
        moderator_id = cursor.fetchone()[0]
        conn.commit()

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    bot.edit_message_text(f"‚úÖ –ö–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.", 
                         call.message.chat.id, 
                         call.message.message_id, 
                         reply_markup=markup)

    if moderator_id:
        markup_mod = types.InlineKeyboardMarkup()
        markup_mod.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"moderator_confirm_{number}"),
            types.InlineKeyboardButton("‚ùå –ù–µ –≤—Å—Ç–∞–ª", callback_data=f"moderator_reject_{number}")
        )
        try:
            bot.send_message(moderator_id, 
                           f"üì± –ù–æ–º–µ—Ä {number} –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ.", 
                           reply_markup=markup_mod)
        except:
            pass

@bot.callback_query_handler(func=lambda call: call.data.startswith("code_error_"))
def handle_verification_error(call):
    number = call.data.split("_")[2]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
        moderator_id = cursor.fetchone()[0]
        cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))
        conn.commit()
    
    bot.edit_message_text(f"‚ùå –ù–æ–º–µ—Ä {number} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ.", 
                         call.message.chat.id, 
                         call.message.message_id)

    for admin_id in config.ADMINS_ID:
        try:
            bot.send_message(admin_id, f"‚ùå –ö–æ–¥ –±—ã–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–æ–º–µ—Ä {number} –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —É–¥–∞–ª—ë–Ω.")
        except:
            pass

    if moderator_id:
        markup_mod = types.InlineKeyboardMarkup()
        markup_mod.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"))
        markup_mod.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        try:
            bot.send_message(moderator_id, 
                           f"‚ùå –ù–æ–º–µ—Ä {number} –±—ã–ª —É–¥–∞–ª—ë–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ.", 
                           reply_markup=markup_mod)
        except:
            pass

@bot.callback_query_handler(func=lambda call: call.data.startswith("moderator_reject_"))
def handle_number_rejection(call):
    number = call.data.split("_")[2]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
        owner = cursor.fetchone()
        cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))
        conn.commit()

        if owner:
            markup_owner = types.InlineKeyboardMarkup()
            markup_owner.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞", callback_data="submit_number"))
            markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                bot.send_message(owner[0], 
                               f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", 
                               reply_markup=markup_owner)
            except:
                pass

    markup_mod = types.InlineKeyboardMarkup()
    markup_mod.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"))
    markup_mod.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    bot.edit_message_text(f"üì± –ù–æ–º–µ—Ä {number} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.\n‚ùå –ù–æ–º–µ—Ä –Ω–µ –≤—Å—Ç–∞–ª.", 
                         call.message.chat.id, 
                         call.message.message_id, 
                         reply_markup=markup_mod)

@bot.callback_query_handler(func=lambda call: call.data.startswith("moderator_confirm_"))
def moderator_confirm_number(call):
    number = call.data.split("_")[2]
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE numbers SET STATUS = "–∞–∫—Ç–∏–≤–µ–Ω", MODERATOR_ID = NULL, CONFIRMED_BY_MODERATOR_ID = ?, TAKE_DATE = ? WHERE NUMBER = ?', 
                      (call.from_user.id, current_date, number))
        cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
        owner = cursor.fetchone()
        conn.commit()

    if owner:
        markup_owner = types.InlineKeyboardMarkup()
        markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(owner[0], 
                        "‚úÖ –í–∞—à –Ω–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç—É. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —Å–ª–µ—Ç–∏—Ç.",
                        reply_markup=markup_owner)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    bot.edit_message_text(f"üì± –ù–æ–º–µ—Ä {number} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç—É. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —Å–ª–µ—Ç–∏—Ç.", 
                         call.message.chat.id, 
                         call.message.message_id, 
                         reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "moderator_numbers")
def moderator_numbers(call):
    if not db.is_moderator(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!")
        return

    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            # –ù–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤–∑—è–ª –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (–µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã)
            cursor.execute('SELECT NUMBER, TAKE_DATE, SHUTDOWN_DATE, STATUS FROM numbers WHERE MODERATOR_ID = ?', 
                          (call.from_user.id,))
            active_numbers = cursor.fetchall()
            
            # –ù–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª (–≤–∫–ª—é—á–∞—è —Å–ª–µ—Ç–µ–≤—à–∏–µ)
            cursor.execute('SELECT NUMBER, TAKE_DATE, SHUTDOWN_DATE, STATUS FROM numbers WHERE CONFIRMED_BY_MODERATOR_ID = ?', 
                          (call.from_user.id,))
            confirmed_numbers = cursor.fetchall()

        response = "üì± <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:</b>\n\n"
        markup = types.InlineKeyboardMarkup()
        has_numbers = False

        if active_numbers:
            has_numbers = True
            response += "üîß –ù–æ–º–µ—Ä–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:\n\n"
            for number, take_date, shutdown_date, status in active_numbers:
                response += f"üì± –ù–æ–º–µ—Ä: {number}\n"
                response += f"üìä –°—Ç–∞—Ç—É—Å: {status if status else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                if take_date == "0":
                    response += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                elif take_date == "1":
                    response += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –∫–æ–¥\n"
                else:
                    response += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
                if shutdown_date != "0":
                    response += f"‚ùå –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
                response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                markup.add(types.InlineKeyboardButton(f"üì± {number}", callback_data=f"moderator_number_{number}"))

        if confirmed_numbers:
            has_numbers = True
            response += "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n\n"
            for number, take_date, shutdown_date, status in confirmed_numbers:
                response += f"üì± –ù–æ–º–µ—Ä: {number}\n"
                response += f"üìä –°—Ç–∞—Ç—É—Å: {status if status else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                if take_date == "0":
                    response += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                elif take_date == "1":
                    response += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –∫–æ–¥\n"
                else:
                    response += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
                if shutdown_date != "0":
                    response += f"‚ùå –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
                response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                markup.add(types.InlineKeyboardButton(f"üì± {number}", callback_data=f"moderator_number_{number}"))

        if not has_numbers:
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            bot.edit_message_text("üì± –£ –≤–∞—Å –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.", 
                                call.message.chat.id, 
                                call.message.message_id, 
                                reply_markup=markup)
        else:
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            bot.edit_message_text(response, 
                                call.message.chat.id, 
                                call.message.message_id, 
                                reply_markup=markup,
                                parse_mode='HTML')

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ moderator_numbers: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤.", 
                            call.message.chat.id, 
                            call.message.message_id, 
                            reply_markup=markup)
        
@bot.callback_query_handler(func=lambda call: call.data.startswith("number_active_"))
def number_active(call):
    number = call.data.split("_")[2]
    
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞ –Ω–∞ "–∞–∫—Ç–∏–≤–µ–Ω" –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TAKE_DATE
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('''UPDATE numbers 
                            SET STATUS = "–∞–∫—Ç–∏–≤–µ–Ω", 
                                TAKE_DATE = ?, 
                                CONFIRMED_BY_MODERATOR_ID = ?, 
                                MODERATOR_ID = NULL 
                            WHERE NUMBER = ?''', 
                          (current_time, call.from_user.id, number))
            conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
            cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            owner_id = cursor.fetchone()[0]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(f"‚úÖ –ù–æ–º–µ—Ä {number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω.\n"
                             "üìù –£–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–∏—Ç, –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –Ω–æ–º–µ—Ä–∞¬ª.", 
                             call.message.chat.id, 
                             call.message.message_id, 
                             reply_markup=markup)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        bot.send_message(owner_id, f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä {number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω.\n"
                                  "‚è≥ –û—Ç—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª—Å—è.")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ number_active: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("number_invalid_"))
def number_invalid(call):
    number = call.data.split("_")[2]
    
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∑–∞–Ω–æ–≤–æ", callback_data=f"send_code_{number}"))
        markup.add(types.InlineKeyboardButton("‚ùå –ù–µ –≤–∞–ª–∏–¥–Ω—ã–π", callback_data=f"invalid_{number}"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.edit_message_text(f"üì± –ù–æ–º–µ—Ä: {number}\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                             call.message.chat.id, 
                             call.message.message_id, 
                             reply_markup=markup)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ number_invalid: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("moderator_number_"))
def show_number_details(call):
    number = call.data.split("_")[2]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS, TAKE_DATE, SHUTDOWN_DATE, MODERATOR_ID, CONFIRMED_BY_MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
        data = cursor.fetchone()

    if data:
        status, take_date, shutdown_date, moderator_id, confirmed_by_moderator_id = data
        text = (f"üì± <b>–°—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞:</b> {status}\n"
                f"üì± <b>–ù–æ–º–µ—Ä:</b> {number}\n")
        if take_date not in ("0", "1"):
            text += f"üü¢ <b>–í—Å—Ç–∞–ª:</b> {take_date}\n"
        if shutdown_date != "0":
            text += f"‚ùå <b>–°–ª–µ—Ç–µ–ª:</b> {shutdown_date}\n"

        markup = types.InlineKeyboardMarkup()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ—Ç–µ–ª" —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (SHUTDOWN_DATE = "0")
        # –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –ª–∏–±–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ (MODERATOR_ID), –ª–∏–±–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω (CONFIRMED_BY_MODERATOR_ID)
        if shutdown_date == "0" and (moderator_id == call.from_user.id or confirmed_by_moderator_id == call.from_user.id):
            markup.add(types.InlineKeyboardButton("üî¥ –°–ª–µ—Ç–µ–ª", callback_data=f"number_failed_{number}"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderator_numbers"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(text, 
                            call.message.chat.id, 
                            call.message.message_id, 
                            reply_markup=markup,
                            parse_mode='HTML')
        
@bot.callback_query_handler(func=lambda call: call.data.startswith("number_failed_"))
def handle_number_failed(call):
    number = call.data.split("_")[2]
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–º–µ—Ä–µ
            cursor.execute('SELECT TAKE_DATE, ID_OWNER, CONFIRMED_BY_MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
            data = cursor.fetchone()
            if not data:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            take_date, owner_id, confirmed_by_moderator_id = data
            
            # –ü–æ–ª—É—á–∞–µ–º HOLD_TIME –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            cursor.execute('SELECT HOLD_TIME FROM settings')
            result = cursor.fetchone()
            hold_time = result[0] if result else 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            end_time = datetime.now()
            if take_date in ("0", "1"):
                work_time = 0  # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã = 0
                worked_enough = False
            else:
                start_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                work_time = (end_time - start_time).total_seconds() / 60  # –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
                worked_enough = work_time >= hold_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞
            shutdown_date = end_time.strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('UPDATE numbers SET SHUTDOWN_DATE = ?, STATUS = "—Å–ª–µ—Ç–µ–ª" WHERE NUMBER = ?', 
                          (shutdown_date, number))
            conn.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        mod_message = (f"‚ùå –ù–æ–º–µ—Ä {number} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π.\n"
                      f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time:.2f} –º–∏–Ω—É—Ç\n")
        if take_date not in ("0", "1"):
            mod_message += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        mod_message += f"‚ùå –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
        if not worked_enough:
            mod_message += f"‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ({hold_time} –º–∏–Ω—É—Ç)!"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        owner_message = (f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} —Å–ª–µ—Ç–µ–ª.\n"
                        f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time:.2f} –º–∏–Ω—É—Ç")
        if not worked_enough:
            owner_message += f"\n‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ({hold_time} –º–∏–Ω—É—Ç)!"
        bot.send_message(owner_id, owner_message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderator_numbers"))
        bot.edit_message_text(mod_message, 
                            call.message.chat.id, 
                            call.message.message_id, 
                            reply_markup=markup,
                            parse_mode='HTML')
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_number_failed: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("invalid_"))
def handle_invalid_number(call):
    number = call.data.split("_")[1]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
        owner = cursor.fetchone()
        cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))
        conn.commit()

        if owner:
            markup_owner = types.InlineKeyboardMarkup()
            markup_owner.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"))
            markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                bot.send_message(owner[0], 
                               f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", 
                               reply_markup=markup_owner)
            except:
                pass

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="get_number"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.edit_message_text("‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã", 
                         call.message.chat.id, 
                         call.message.message_id, 
                         reply_markup=markup)

def is_russian_number(phone_number):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    phone_number = phone_number.strip()
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "7" –∏–ª–∏ "8", –¥–æ–±–∞–≤–ª—è–µ–º "+7"
    if phone_number.startswith("7") or phone_number.startswith("8"):
        phone_number = "+7" + phone_number[1:]
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "+", –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if not phone_number.startswith("+"):
        phone_number = "+" + phone_number
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: +7 –∏ 10 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ
    pattern = r'^\+7\d{10}$'
    return phone_number if bool(re.match(pattern, phone_number)) else None

@bot.callback_query_handler(func=lambda call: call.data == "submit_number")
def request_number(call):
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    msg = bot.send_message(call.message.chat.id, 
                         f"üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):\n–ü—Ä–∏–º–µ—Ä:\n+79991234567\n+79001234567\n+79021234567\nüíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}$ –∑–∞ –Ω–æ–º–µ—Ä\n‚è± –•–æ–ª–¥: {hold_time} –º–∏–Ω—É—Ç",
                         reply_markup=markup,
                         parse_mode='HTML')
    bot.register_next_step_handler(msg, process_numbers)

def process_numbers(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not message or not message.text:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì± –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="submit_number"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º!", reply_markup=markup)
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤
    numbers = message.text.strip().split('\n')
    if not numbers or all(not num.strip() for num in numbers):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì± –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="submit_number"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞!", reply_markup=markup)
        return

    valid_numbers = []
    invalid_numbers = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞
    for number in numbers:
        number = number.strip()
        if not number:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            continue
        corrected_number = is_russian_number(number)
        if corrected_number:
            valid_numbers.append(corrected_number)
        else:
            invalid_numbers.append(number)

    # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if not valid_numbers:
        response_text = "‚ùå –í—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567."
        if invalid_numbers:
            response_text += "\n\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n" + "\n".join(invalid_numbers)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì± –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="submit_number"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id, response_text, reply_markup=markup, parse_mode='HTML')
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            success_count = 0
            already_exists = 0
            successfully_added = []  # –°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤

            for number in valid_numbers:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ
                    cursor.execute('SELECT NUMBER, SHUTDOWN_DATE FROM numbers WHERE NUMBER = ?', (number,))
                    existing_number = cursor.fetchone()

                    if existing_number:
                        if existing_number[1] == "0":  # –ù–æ–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω
                            already_exists += 1
                            continue
                        else:
                            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π
                            cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä
                    cursor.execute('INSERT INTO numbers (NUMBER, ID_OWNER, TAKE_DATE, SHUTDOWN_DATE, STATUS) VALUES (?, ?, ?, ?, ?)',
                                  (number, message.from_user.id, '0', '0', '–æ–∂–∏–¥–∞–µ—Ç'))
                    success_count += 1
                    successfully_added.append(number)
                except sqlite3.IntegrityError:
                    already_exists += 1
                    continue
            conn.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = "<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤:</b>\n\n"
        if success_count > 0:
            response_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {success_count} –Ω–æ–º–µ—Ä–æ–≤\n"
            response_text += "üì± –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(successfully_added) + "\n"
        if already_exists > 0:
            response_text += f"‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {already_exists} –Ω–æ–º–µ—Ä–æ–≤\n"
        if invalid_numbers:
            response_text += f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n" + "\n".join(invalid_numbers) + "\n"

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –Ω–æ–º–µ—Ä–∞: {successfully_added}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_numbers: {e}")
        response_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì± –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="submit_number"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.send_message(message.chat.id, response_text, reply_markup=markup, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == "all_numbers")
def show_all_numbers(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤!")
        return

    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT NUMBER, ID_OWNER, TAKE_DATE, SHUTDOWN_DATE, MODERATOR_ID, STATUS, CONFIRMED_BY_MODERATOR_ID FROM numbers')
            numbers = cursor.fetchall()

        if not numbers:
            text = "üì≠ –ù–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        else:
            text = "<b>üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤:</b>\n\n"
            for number, owner_id, take_date, shutdown_date, moderator_id, status, confirmed_by_moderator_id in numbers:
                text += f"üì± <b>–ù–æ–º–µ—Ä:</b> {number}\n"
                text += f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {owner_id}\n"
                text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status if status else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                if take_date == "0":
                    text += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                elif take_date == "1":
                    text += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –∫–æ–¥\n"
                else:
                    text += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
                if shutdown_date != "0":
                    text += f"‚ùå –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
                if moderator_id:
                    text += f"üõ° <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> {moderator_id}\n"
                if confirmed_by_moderator_id:
                    text += f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª:</b> {confirmed_by_moderator_id}\n"
                text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML')

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_all_numbers: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤.", 
                            call.message.chat.id, 
                            call.message.message_id, 
                            reply_markup=markup)
                
@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main(call):
    user_id = call.from_user.id
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)
        
        cursor.execute('SELECT NUMBER FROM numbers WHERE MODERATOR_ID = ? AND SHUTDOWN_DATE = "0" AND VERIFICATION_CODE IS NULL', 
                      (user_id,))
        active_number = cursor.fetchone()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_admin = user_id in config.ADMINS_ID
    is_moderator = db.is_moderator(user_id)

    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if is_moderator and not is_admin:
        # –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
        welcome_text = "üìù <b>–ó–∞—è–≤–∫–∏</b>"
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–≤–∫–ª—é—á–∞—è —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω —Ç–∞–∫–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä)
        welcome_text = (
            f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
            f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
            "<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
            "‚Ä¢ <i>–í—ã –ø—Ä–æ–¥–∞—ë—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
            f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ {hold_time} –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã.</b>\n\n"
            "<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
            f"‚ñ™Ô∏è <code>{price}$</code> –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ {hold_time} –º–∏–Ω—É—Ç)\n"
            f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME} ?</b>\n"
            "‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
            "‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
            "‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
            "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>"
        )
    
    if active_number and is_moderator:
        welcome_text += f"\n\n‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–æ–º–µ—Ä: {active_number[0]}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –Ω–∏–º –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä'."
    
    markup = types.InlineKeyboardMarkup()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ö–Ω–æ–ø–∫–∏ "–°–¥–∞—Ç—å –Ω–æ–º–µ—Ä" –∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not is_moderator or is_admin:
        markup.row(
            types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ê–¥–º–∏–Ω–∫–∞" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if is_admin:
        markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel"))
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if is_moderator:
        markup.add(
            types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="get_number"),
            types.InlineKeyboardButton("üì± –ú–æ–∏ –Ω–æ–º–µ—Ä–∞", callback_data="moderator_numbers")
        )
    
    bot.edit_message_text(welcome_text, 
                         call.message.chat.id, 
                         call.message.message_id, 
                         parse_mode='HTML', 
                         reply_markup=markup)

if __name__ == "__main__":
    run_bot()